name: Deploy to Digital Ocean

on:
  push:
    branches:
      - main
      - cicd

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add servers to known hosts
        run: |
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ secrets.SQL_DROPLET_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=3 root@${{ secrets.DROPLET_IP }} << 'EOF'
          
          # Create application directory
          mkdir -p /var/www/rentall-cars
          cd /var/www/rentall-cars
          
          # Stop existing services if running
          pm2 delete all || true
          
          # Backup current deployment (if exists)
          if [ -d "current" ]; then
            rm -rf backup
            mv current backup
          fi
          
          # Clone/update repository
          if [ -d "repo" ]; then
            cd repo
            git fetch origin
            git reset --hard origin/main
            git pull origin main
          else
            git clone git@github.com:${{ github.repository }} repo
            cd repo
          fi
          
          # Create new deployment directory
          cd ..
          cp -r repo current
          cd current
          
          # Verify files are present
          echo "Files in current directory:"
          ls -la
          echo "Backend directory:"
          ls -la RentALL_Cars_API_V3.1.5/ || echo "Backend directory not found"
          echo "Frontend directory:"
          ls -la RentALL_Cars_V3.1.5/ || echo "Frontend directory not found"
          
          EOF

      - name: Setup MySQL Database
        run: |
          ssh -o ServerAliveInterval=60 root@${{ secrets.SQL_DROPLET_IP }} << 'EOF'
          
          # Install MySQL if not present
          sudo apt-get update
          sudo apt-get install -y mysql-server
          
          # Start MySQL service
          sudo systemctl start mysql
          sudo systemctl enable mysql
          
          # Secure MySQL installation (basic setup)
          sudo mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '${{ secrets.DATABASE_PASSWORD }}';" || true
          sudo mysql -e "FLUSH PRIVILEGES;"
          
          # Create database and user with mysql_native_password authentication
          sudo mysql -uroot -p${{ secrets.DATABASE_PASSWORD }} << MYSQLEOF || true
          DROP DATABASE IF EXISTS ${{ secrets.DATABASE_DBNAME }};
          CREATE DATABASE ${{ secrets.DATABASE_DBNAME }};
          DROP USER IF EXISTS '${{ secrets.DATABASE_USERNAME }}'@'%';
          DROP USER IF EXISTS '${{ secrets.DATABASE_USERNAME }}'@'localhost';
          
          -- Create user with mysql_native_password authentication
          CREATE USER '${{ secrets.DATABASE_USERNAME }}'@'%' IDENTIFIED WITH mysql_native_password BY '${{ secrets.DATABASE_PASSWORD }}';
          CREATE USER '${{ secrets.DATABASE_USERNAME }}'@'localhost' IDENTIFIED WITH mysql_native_password BY '${{ secrets.DATABASE_PASSWORD }}';
          
          -- Grant privileges
          GRANT ALL PRIVILEGES ON ${{ secrets.DATABASE_DBNAME }}.* TO '${{ secrets.DATABASE_USERNAME }}'@'%';
          GRANT ALL PRIVILEGES ON ${{ secrets.DATABASE_DBNAME }}.* TO '${{ secrets.DATABASE_USERNAME }}'@'localhost';
          
          -- Set default authentication plugin globally
          SET GLOBAL default_authentication_plugin = 'mysql_native_password';
          
          FLUSH PRIVILEGES;
          MYSQLEOF
          
          # Update MySQL configuration
          echo "[mysqld]" | sudo tee -a /etc/mysql/mysql.conf.d/mysqld.cnf
          echo "default_authentication_plugin=mysql_native_password" | sudo tee -a /etc/mysql/mysql.conf.d/mysqld.cnf
          
          # Allow remote connections
          sudo sed -i 's/bind-address\s*=\s*127.0.0.1/bind-address = 0.0.0.0/' /etc/mysql/mysql.conf.d/mysqld.cnf || true
          
          # Restart MySQL
          sudo systemctl restart mysql
          
          # Open MySQL port
          sudo ufw allow 3306
          
          EOF

      - name: Import Database Dump
        timeout-minutes: 5
        run: |
          if [ -f "./RentALL_Cars_V3.1.5/db/db_dump.sql" ]; then
            echo "Database dump found, copying to SQL droplet..."
            scp ./RentALL_Cars_V3.1.5/db/db_dump.sql root@${{ secrets.SQL_DROPLET_IP }}:/tmp/
            
            ssh root@${{ secrets.SQL_DROPLET_IP }} << 'EOF'
            mysql -u${{ secrets.DATABASE_USERNAME }} -p${{ secrets.DATABASE_PASSWORD }} ${{ secrets.DATABASE_DBNAME }} < /tmp/db_dump.sql
            rm /tmp/db_dump.sql
            echo "Database import completed successfully!"
          EOF
          else
            echo "Database dump not found, skipping import..."
          fi

      - name: Setup System Dependencies
        timeout-minutes: 10
        run: |
          ssh -o ServerAliveInterval=60 root@${{ secrets.DROPLET_IP }} << 'EOF'
          
          # Update system packages
          sudo apt-get update
          
          # Install Node.js 20.x (recommended for SSR apps)
          if ! command -v node &> /dev/null; then
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          
          # Install yarn and pm2 globally
          npm install -g yarn pm2
          
          # Install Nginx
          sudo apt-get install -y nginx
          
          # Create swap file for memory-intensive builds
          if [ ! -f /swapfile ]; then
            sudo fallocate -l 4G /swapfile  # Increased to 4G for SSR builds
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
          fi
          
          EOF

      - name: Setup Backend
        timeout-minutes: 15
        run: |
          ssh -o ServerAliveInterval=60 root@${{ secrets.DROPLET_IP }} << 'EOF'
          cd /var/www/rentall-cars/current/RentALL_Cars_API_V3.1.5
          
          echo "Setting up backend..."
          
          # Install dependencies
          yarn install 
          
          # Update MySQL packages
          yarn add mysql2@latest sequelize@latest || true
          
          # Create environment file
          cat > .env << 'ENVEOF'
          NODE_ENV=production
          PORT=4000
          DATABASE_URL=mysql://${{ secrets.DATABASE_USERNAME }}:${{ secrets.DATABASE_PASSWORD }}@${{ secrets.SQL_DROPLET_IP }}:3306/${{ secrets.DATABASE_DBNAME }}?authPlugin=mysql_native_password
          DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          DATABASE_DBNAME=${{ secrets.DATABASE_DBNAME }}
          DATABASE_HOST=${{ secrets.SQL_DROPLET_IP }}
          DATABASE_DIALECT=mysql
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          WEBSITE_HOSTNAME=${{ secrets.DROPLET_IP }}:4000
          SITE_URL=http://${{ secrets.DROPLET_IP }}
          SITENAME=${{ secrets.SITENAME }}
          WEBSITE_URL=http://${{ secrets.DROPLET_IP }}
          SOCKET_PORT=4001
          SOCKET_URL=http://${{ secrets.DROPLET_IP }}:4001
          STRIPE_SECRET=${{ secrets.STRIPE_SECRET }}
          PAYPAL_RETURN_URL=${{ secrets.PAYPAL_RETURN_URL }}
          PAYPAL_CANCEL_URL=${{ secrets.PAYPAL_CANCEL_URL }}
          PAYPAL_SUCCESS_REDIRECT_URL=${{ secrets.PAYPAL_SUCCESS_REDIRECT_URL }}
          COINBASE_URL=${{ secrets.COINBASE_URL }}
          PLACE_DETAILS_URL=${{ secrets.PLACE_DETAILS_URL }}
          PLACES_AUTOCOMPLETE_URL=${{ secrets.PLACES_AUTOCOMPLETE_URL }}
          GOOGLE_MAP_SERVER_API=${{ secrets.GOOGLE_MAP_SERVER_API }}
          CRON_TIMEZONE=${{ secrets.CRON_TIMEZONE }}
          FILEUPLOAD_DIR=./images/upload/
          BANNER_UPLOAD_DIR=./images/banner/
          PROFILE_PHOTO_UPLOAD_DIR=./images/avatar/
          DOCUMENT_UPLOAD_DIR=./images/document/
          LOCATION_UPLOAD_DIR=./images/popularLocation/
          HOME_BANNER_UPLOAD_DIR=./images/home/
          CLAIM_IMAGES_UPLOAD_DIR=./images/claims/
          FAVICON_UPLOAD_DIR=./images/favicon/
          WHYHOST_UPLOAD_DIR=./images/whyhost/
          LOGOUPLOAD_DIR=./images/logo/
          OGIMAGEUPLOAD_DIR=./images/og-image/
          ENVEOF
          
          # Build backend
          echo "Building backend..."
          NODE_OPTIONS="--max_old_space_size=3072" yarn run build 2>&1 | tee backend-build.log
          
          # Create directories
          mkdir -p images/upload images/banner images/avatar images/document
          mkdir -p images/popularLocation images/home images/claims
          mkdir -p images/favicon images/whyhost images/logo images/og-image
          chmod -R 755 images/
          
          # Clean install for production
          yarn install --production --ignore-scripts
          
          echo "Backend setup completed"
          EOF

      - name: Setup Frontend (SSR)
        timeout-minutes: 20
        run: |
          ssh -o ServerAliveInterval=60 root@${{ secrets.DROPLET_IP }} << 'EOF'
          cd /var/www/rentall-cars/current/RentALL_Cars_V3.1.5
          
          echo "Setting up SSR frontend..."
          
          # Install dependencies
          yarn install 
          
          # Create environment file optimized for SSR
          cat > .env << 'ENVEOF'
          NODE_ENV=production
          PORT=3000
          # Client-side environment variables
          REACT_APP_API_URL=http://${{ secrets.DROPLET_IP }}:4000
          REACT_APP_SOCKET_URL=http://${{ secrets.DROPLET_IP }}:4001
          REACT_APP_NODE_ENV=production
          REACT_APP_JWT_SECRET=${{ secrets.JWT_SECRET }}
          REACT_APP_STRIPE_SECRET=${{ secrets.STRIPE_SECRET }}
          REACT_APP_GOOGLE_MAP_API=${{ secrets.GOOGLE_MAP_CLIENT_API }}
          # Server-side environment variables
          DATABASE_URL=mysql://${{ secrets.DATABASE_USERNAME }}:${{ secrets.DATABASE_PASSWORD }}@${{ secrets.SQL_DROPLET_IP }}:3306/${{ secrets.DATABASE_DBNAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          COINBASE_URL=${{ secrets.COINBASE_URL }}
          PLACE_DETAILS_URL=${{ secrets.PLACE_DETAILS_URL }}
          PLACES_AUTOCOMPLETE_URL=${{ secrets.PLACES_AUTOCOMPLETE_URL }}
          PAYPAL_RETURN_URL=${{ secrets.PAYPAL_RETURN_URL }}
          PAYPAL_CANCEL_URL=${{ secrets.PAYPAL_CANCEL_URL }}
          PAYPAL_SUCCESS_REDIRECT_URL=${{ secrets.PAYPAL_SUCCESS_REDIRECT_URL }}
          STRIPE_SECRET=${{ secrets.STRIPE_SECRET }}
          GOOGLE_MAP_SERVER_API=${{ secrets.GOOGLE_MAP_SERVER_API }}
          CRON_TIMEZONE=${{ secrets.CRON_TIMEZONE }}
          # File upload directories
          FILEUPLOAD_DIR=./images/upload/
          BANNER_UPLOAD_DIR=./images/banner/
          PROFILE_PHOTO_UPLOAD_DIR=./images/avatar/
          DOCUMENT_UPLOAD_DIR=./images/document/
          LOCATION_UPLOAD_DIR=./images/popularLocation/
          HOME_BANNER_UPLOAD_DIR=./images/home/
          CLAIM_IMAGES_UPLOAD_DIR=./images/claims/
          FAVICON_UPLOAD_DIR=./images/favicon/
          WHYHOST_UPLOAD_DIR=./images/whyhost/
          LOGOUPLOAD_DIR=./images/logo/
          OGIMAGEUPLOAD_DIR=./images/og-image/
          # Internal API URLs for SSR
          API_URL=http://localhost:4000
          SOCKET_URL=http://localhost:4001
          SOCKET_PORT=4001
          SERVER_API_URL=http://localhost:4000
          # Asset serving configuration
          PUBLIC_URL=/
          ASSET_PATH=/assets/
          ENVEOF
          
          # Build the SSR application
          echo "Building SSR application..."
          NODE_OPTIONS="--max_old_space_size=4096" yarn run build 2>&1 | tee frontend-build.log
          
          # Verify build output
          echo "Build verification:"
          ls -la build/ || echo "Build directory missing"
          ls -la build/public/ || echo "Public directory missing"
          ls -la build/public/assets/ || echo "Assets directory missing"
          
          # Create image directories
          mkdir -p images/upload images/banner images/avatar images/document
          mkdir -p images/popularLocation images/home images/claims
          mkdir -p images/favicon images/whyhost images/logo images/og-image
          
          # Set permissions for all directories
          chmod -R 755 images/
          chmod -R 755 build/ || echo "No build directory to set permissions"
          
          echo "Frontend SSR setup completed"
          EOF

      - name: Setup Nginx for Custom Domain
        timeout-minutes: 10
        run: |
          ssh root@${{ secrets.DROPLET_IP }} << 'EOF'
          
          # Install certbot for SSL certificates
          sudo apt-get update
          sudo apt-get install -y certbot python3-certbot-nginx
          
          # Create optimized Nginx configuration for custom domain
          sudo rm -f /etc/nginx/sites-available/rentall-cars
          
          # Create Nginx config using echo commands (fixed gzip_proxied directive)
          echo "# Redirect HTTP to HTTPS for custom domain" | sudo tee /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "server {" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    listen 80;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    server_name ${{ secrets.CUSTOM_DOMAIN }} www.${{ secrets.CUSTOM_DOMAIN }};" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    # Allow Let's Encrypt verification" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    location /.well-known/acme-challenge/ {" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        root /var/www/html;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    }" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    # Redirect all other traffic to HTTPS" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    location / {" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        return 301 https://${{ secrets.CUSTOM_DOMAIN }}\$request_uri;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    }" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "}" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "# HTTPS configuration for custom domain" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "server {" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    listen 443 ssl http2;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    server_name ${{ secrets.CUSTOM_DOMAIN }} www.${{ secrets.CUSTOM_DOMAIN }};" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    # SSL configuration" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    ssl_certificate /etc/letsencrypt/live/${{ secrets.CUSTOM_DOMAIN }}/fullchain.pem;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    ssl_certificate_key /etc/letsencrypt/live/${{ secrets.CUSTOM_DOMAIN }}/privkey.pem;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    # SSL security settings" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    ssl_protocols TLSv1.2 TLSv1.3;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    ssl_prefer_server_ciphers off;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    ssl_session_cache shared:SSL:10m;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    ssl_session_timeout 10m;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    # Security headers" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" always;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    add_header X-Content-Type-Options nosniff always;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    add_header X-Frame-Options DENY always;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    add_header X-XSS-Protection \"1; mode=block\" always;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    # Gzip compression" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    gzip on;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    gzip_vary on;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    gzip_min_length 1024;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    gzip_proxied expired no-cache no-store private auth;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml+rss application/javascript;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    # Static assets with long cache" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    location /assets/ {" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        alias /var/www/rentall-cars/current/RentALL_Cars_V3.1.5/build/public/assets/;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        expires 1y;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        add_header Cache-Control \"public, immutable\";" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        access_log off;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    }" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    # Images with cache" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    location /images/ {" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        alias /var/www/rentall-cars/current/RentALL_Cars_V3.1.5/images/;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        expires 30d;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        add_header Cache-Control \"public\";" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        access_log off;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    }" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    # Public files" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    location /public/ {" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        alias /var/www/rentall-cars/current/RentALL_Cars_V3.1.5/build/public/;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        expires 1d;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        add_header Cache-Control \"public\";" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    }" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    # Backend API" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    location /api/ {" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_pass http://localhost:4000;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_http_version 1.1;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_set_header Upgrade \$http_upgrade;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_set_header Connection 'upgrade';" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_set_header Host \$host;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_set_header X-Real-IP \$remote_addr;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_set_header X-Forwarded-Proto \$scheme;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_cache_bypass \$http_upgrade;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_read_timeout 300s;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_connect_timeout 75s;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    }" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    # Socket.io" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    location /socket.io/ {" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_pass http://localhost:4001;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_http_version 1.1;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_set_header Upgrade \$http_upgrade;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_set_header Connection \"upgrade\";" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_set_header Host \$host;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_set_header X-Real-IP \$remote_addr;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_set_header X-Forwarded-Proto \$scheme;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    }" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    # SSR Frontend (catch-all)" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    location / {" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_pass http://localhost:3000;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_http_version 1.1;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_set_header Upgrade \$http_upgrade;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_set_header Connection 'upgrade';" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_set_header Host \$host;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_set_header X-Real-IP \$remote_addr;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_set_header X-Forwarded-Proto \$scheme;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_cache_bypass \$http_upgrade;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_read_timeout 300s;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_connect_timeout 75s;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "    }" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          echo "}" | sudo tee -a /etc/nginx/sites-available/rentall-cars > /dev/null
          
          # Enable site
          sudo ln -sf /etc/nginx/sites-available/rentall-cars /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default
          
          # Test Nginx configuration
          echo "Testing Nginx configuration..."
          sudo nginx -t
          
          EOF

      - name: Configure SSL Certificate with Let's Encrypt
        timeout-minutes: 10
        run: |
          ssh root@${{ secrets.DROPLET_IP }} << 'EOF'
          
          echo "=== SSL CERTIFICATE SETUP ==="
          
          # Create web root for Let's Encrypt
          sudo mkdir -p /var/www/html
          
          # Start Nginx to handle initial requests
          sudo systemctl start nginx
          sudo systemctl status nginx --no-pager -l
          
          # Wait for Nginx to start
          sleep 10
          
          # Check if certificate already exists
          if [ -f "/etc/letsencrypt/live/${{ secrets.CUSTOM_DOMAIN }}/fullchain.pem" ]; then
            echo "✅ SSL certificate already exists for ${{ secrets.CUSTOM_DOMAIN }}"
            echo "Certificate info:"
            sudo certbot certificates | grep -A 5 "${{ secrets.CUSTOM_DOMAIN }}" || echo "Could not retrieve certificate info"
          else
            echo "🔄 SSL certificate not found. Creating new certificate for ${{ secrets.CUSTOM_DOMAIN }}..."
            
            # Verify domain points to this server
            echo "Checking DNS resolution for ${{ secrets.CUSTOM_DOMAIN }}..."
            nslookup ${{ secrets.CUSTOM_DOMAIN }} || echo "Warning: DNS resolution failed"
            
            # Test if domain reaches this server
            echo "Testing if domain reaches this server..."
            curl -I --max-time 10 http://${{ secrets.CUSTOM_DOMAIN }}/.well-known/test 2>/dev/null || echo "Domain connectivity test inconclusive"
            
            # Attempt to get SSL certificate
            echo "Requesting SSL certificate from Let's Encrypt..."
            sudo certbot certonly \
              --webroot \
              --webroot-path=/var/www/html \
              --email ${{ secrets.SSL_EMAIL }} \
              --agree-tos \
              --no-eff-email \
              --domains ${{ secrets.CUSTOM_DOMAIN }},www.${{ secrets.CUSTOM_DOMAIN }} \
              --non-interactive \
              --verbose && {
                echo "✅ SSL certificate successfully created!"
                echo "Certificate details:"
                sudo certbot certificates | grep -A 5 "${{ secrets.CUSTOM_DOMAIN }}"
              } || {
                echo "❌ SSL certificate creation failed. Checking logs..."
                sudo tail -20 /var/log/letsencrypt/letsencrypt.log || echo "Could not read certbot logs"
                
                echo "🔄 Keeping HTTP-only configuration as fallback..."
                echo "⚠️  SSL certificate creation failed. Site will run on HTTP only."
                echo "   You can manually run 'sudo certbot --nginx' on the server later."
              }
          fi
          
          # Test and reload Nginx configuration
          echo "Testing Nginx configuration..."
          sudo nginx -t && {
            echo "✅ Nginx configuration is valid"
            sudo systemctl reload nginx
            echo "✅ Nginx reloaded successfully"
          } || {
            echo "❌ Nginx configuration test failed"
            sudo nginx -t
            exit 1
          }
          
          sudo systemctl enable nginx
          
          # Setup automatic certificate renewal
          echo "Setting up automatic SSL certificate renewal..."
          (crontab -l 2>/dev/null | grep -v "certbot renew"; echo "0 12 * * * /usr/bin/certbot renew --quiet --deploy-hook 'systemctl reload nginx'") | crontab -
          echo "✅ Auto-renewal cron job configured"
          
          # Display current certificate status
          echo "=== FINAL SSL STATUS ==="
          if [ -f "/etc/letsencrypt/live/${{ secrets.CUSTOM_DOMAIN }}/fullchain.pem" ]; then
            echo "✅ SSL Certificate: ACTIVE"
            echo "📅 Certificate expires: $(sudo openssl x509 -enddate -noout -in /etc/letsencrypt/live/${{ secrets.CUSTOM_DOMAIN }}/fullchain.pem | cut -d= -f2)"
          else
            echo "⚠️  SSL Certificate: NOT ACTIVE (HTTP only)"
          fi
          
          EOF

      - name: Update Environment Variables for Custom Domain
        timeout-minutes: 5
        run: |
          ssh root@${{ secrets.DROPLET_IP }} << 'EOF'
          
          # Update backend environment with custom domain
          cd /var/www/rentall-cars/current/RentALL_Cars_API_V3.1.5
          
          # Create updated environment file
          cat > .env << 'ENVEOF'
          NODE_ENV=production
          PORT=4000
          DATABASE_URL=mysql://${{ secrets.DATABASE_USERNAME }}:${{ secrets.DATABASE_PASSWORD }}@${{ secrets.SQL_DROPLET_IP }}:3306/${{ secrets.DATABASE_DBNAME }}?authPlugin=mysql_native_password
          DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          DATABASE_DBNAME=${{ secrets.DATABASE_DBNAME }}
          DATABASE_HOST=${{ secrets.SQL_DROPLET_IP }}
          DATABASE_DIALECT=mysql
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          WEBSITE_HOSTNAME=${{ secrets.CUSTOM_DOMAIN }}
          SITE_URL=https://${{ secrets.CUSTOM_DOMAIN }}
          SITENAME=${{ secrets.SITENAME }}
          WEBSITE_URL=https://${{ secrets.CUSTOM_DOMAIN }}
          SOCKET_PORT=4001
          SOCKET_URL=https://${{ secrets.CUSTOM_DOMAIN }}:4001
          STRIPE_SECRET=${{ secrets.STRIPE_SECRET }}
          PAYPAL_RETURN_URL=${{ secrets.PAYPAL_RETURN_URL }}
          PAYPAL_CANCEL_URL=${{ secrets.PAYPAL_CANCEL_URL }}
          PAYPAL_SUCCESS_REDIRECT_URL=${{ secrets.PAYPAL_SUCCESS_REDIRECT_URL }}
          COINBASE_URL=${{ secrets.COINBASE_URL }}
          PLACE_DETAILS_URL=${{ secrets.PLACE_DETAILS_URL }}
          PLACES_AUTOCOMPLETE_URL=${{ secrets.PLACES_AUTOCOMPLETE_URL }}
          GOOGLE_MAP_SERVER_API=${{ secrets.GOOGLE_MAP_SERVER_API }}
          CRON_TIMEZONE=${{ secrets.CRON_TIMEZONE }}
          FILEUPLOAD_DIR=./images/upload/
          BANNER_UPLOAD_DIR=./images/banner/
          PROFILE_PHOTO_UPLOAD_DIR=./images/avatar/
          DOCUMENT_UPLOAD_DIR=./images/document/
          LOCATION_UPLOAD_DIR=./images/popularLocation/
          HOME_BANNER_UPLOAD_DIR=./images/home/
          CLAIM_IMAGES_UPLOAD_DIR=./images/claims/
          FAVICON_UPLOAD_DIR=./images/favicon/
          WHYHOST_UPLOAD_DIR=./images/whyhost/
          LOGOUPLOAD_DIR=./images/logo/
          OGIMAGEUPLOAD_DIR=./images/og-image/
          ENVEOF
          
          # Update frontend environment with custom domain
          cd /var/www/rentall-cars/current/RentALL_Cars_V3.1.5
          
          cat > .env << 'ENVEOF'
          NODE_ENV=production
          PORT=3000
          # Client-side environment variables with custom domain
          REACT_APP_API_URL=https://${{ secrets.CUSTOM_DOMAIN }}/api
          REACT_APP_SOCKET_URL=https://${{ secrets.CUSTOM_DOMAIN }}
          REACT_APP_NODE_ENV=production
          REACT_APP_JWT_SECRET=${{ secrets.JWT_SECRET }}
          REACT_APP_STRIPE_SECRET=${{ secrets.STRIPE_SECRET }}
          REACT_APP_GOOGLE_MAP_API=${{ secrets.GOOGLE_MAP_CLIENT_API }}
          # Server-side environment variables
          DATABASE_URL=mysql://${{ secrets.DATABASE_USERNAME }}:${{ secrets.DATABASE_PASSWORD }}@${{ secrets.SQL_DROPLET_IP }}:3306/${{ secrets.DATABASE_DBNAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          COINBASE_URL=${{ secrets.COINBASE_URL }}
          PLACE_DETAILS_URL=${{ secrets.PLACE_DETAILS_URL }}
          PLACES_AUTOCOMPLETE_URL=${{ secrets.PLACES_AUTOCOMPLETE_URL }}
          PAYPAL_RETURN_URL=${{ secrets.PAYPAL_RETURN_URL }}
          PAYPAL_CANCEL_URL=${{ secrets.PAYPAL_CANCEL_URL }}
          PAYPAL_SUCCESS_REDIRECT_URL=${{ secrets.PAYPAL_SUCCESS_REDIRECT_URL }}
          STRIPE_SECRET=${{ secrets.STRIPE_SECRET }}
          GOOGLE_MAP_SERVER_API=${{ secrets.GOOGLE_MAP_SERVER_API }}
          CRON_TIMEZONE=${{ secrets.CRON_TIMEZONE }}
          # File upload directories
          FILEUPLOAD_DIR=./images/upload/
          BANNER_UPLOAD_DIR=./images/banner/
          PROFILE_PHOTO_UPLOAD_DIR=./images/avatar/
          DOCUMENT_UPLOAD_DIR=./images/document/
          LOCATION_UPLOAD_DIR=./images/popularLocation/
          HOME_BANNER_UPLOAD_DIR=./images/home/
          CLAIM_IMAGES_UPLOAD_DIR=./images/claims/
          FAVICON_UPLOAD_DIR=./images/favicon/
          WHYHOST_UPLOAD_DIR=./images/whyhost/
          LOGOUPLOAD_DIR=./images/logo/
          OGIMAGEUPLOAD_DIR=./images/og-image/
          # Internal API URLs for SSR
          API_URL=http://localhost:4000
          SOCKET_URL=http://localhost:4001
          SOCKET_PORT=4001
          SERVER_API_URL=http://localhost:4000
          # Asset serving configuration
          PUBLIC_URL=/
          ASSET_PATH=/assets/
          ENVEOF
          
          EOF

      - name: Setup PM2 for SSR (Single Instance Mode)
        timeout-minutes: 10
        run: |
          ssh -o ServerAliveInterval=60 root@${{ secrets.DROPLET_IP }} << 'EOF'
          cd /var/www/rentall-cars/current
          
          # Create PM2 ecosystem optimized for SSR
          cat > ecosystem.config.js << 'PMEOF'
          module.exports = {
            apps: [
              {
                name: 'rentall-backend',
                cwd: '/var/www/rentall-cars/current/RentALL_Cars_API_V3.1.5',
                script: 'build/server.js',
                interpreter: 'node',
                env: {
                  NODE_ENV: 'production',
                  PORT: 4000
                },
                instances: 1,  // Single instance for SSR
                exec_mode: 'fork',  // Fork mode instead of cluster
                autorestart: true,
                watch: false,
                max_memory_restart: '1G',
                error_file: '/var/log/pm2/rentall-backend-error.log',
                out_file: '/var/log/pm2/rentall-backend-out.log',
                log_file: '/var/log/pm2/rentall-backend.log',
                time: true
              },
              {
                name: 'rentall-frontend-ssr',
                cwd: '/var/www/rentall-cars/current/RentALL_Cars_V3.1.5',
                script: 'build/server.js',
                interpreter: 'node',
                env: {
                  NODE_ENV: 'production',
                  PORT: 3000
                },
                instances: 1,  // Single instance for SSR
                exec_mode: 'fork',  // Fork mode for SSR
                autorestart: true,
                watch: false,
                max_memory_restart: '2G',  // Higher memory limit for SSR
                error_file: '/var/log/pm2/rentall-frontend-error.log',
                out_file: '/var/log/pm2/rentall-frontend-out.log',
                log_file: '/var/log/pm2/rentall-frontend.log',
                time: true,
                restart_delay: 5000
              }
            ]
          };
          PMEOF
          
          # Create log directory
          sudo mkdir -p /var/log/pm2
          
          # Stop existing processes
          pm2 delete all || true
          pm2 kill || true
          
          # Start new processes
          echo "Starting PM2 services..."
          pm2 start ecosystem.config.js
          
          # Wait for services to start
          sleep 15
          
          # Check status
          pm2 status
          pm2 save
          
          # Setup PM2 startup
          pm2 startup systemd -u root --hp /root
          
          echo "PM2 setup completed"
          EOF

      - name: Final Health Check with Custom Domain
        timeout-minutes: 5
        run: |
          sleep 30
          
          echo "=== CUSTOM DOMAIN HEALTH CHECKS ==="
          
          echo "Testing custom domain HTTP..."
          curl -f --max-time 30 http://${{ secrets.CUSTOM_DOMAIN }} || echo "HTTP check failed"
          
          echo "Testing custom domain HTTPS..."
          curl -f --max-time 30 https://${{ secrets.CUSTOM_DOMAIN }} || echo "HTTPS check failed"
          
          echo "Testing www subdomain..."
          curl -f --max-time 30 https://www.${{ secrets.CUSTOM_DOMAIN }} || echo "WWW check failed"
          
          echo "Testing backend via domain..."
          curl -f --max-time 30 https://${{ secrets.CUSTOM_DOMAIN }}/api || echo "Backend via domain failed"
          
          echo "Testing asset serving via domain..."
          curl -I --max-time 10 https://${{ secrets.CUSTOM_DOMAIN }}/assets/ || echo "Assets via domain failed"
          
          echo "Testing IP fallback..."
          curl -f --max-time 30 http://${{ secrets.DROPLET_IP }} || echo "IP fallback failed"

      - name: Deployment Summary with Custom Domain
        if: always()
        run: |
          echo "=== DEPLOYMENT SUMMARY ==="
          echo "🌐 Custom Domain: https://${{ secrets.CUSTOM_DOMAIN }}"
          echo "🌐 WWW Domain: https://www.${{ secrets.CUSTOM_DOMAIN }}"
          echo "🔒 SSL Status: Auto-configured with Let's Encrypt"
          echo "📱 IP Fallback: http://${{ secrets.DROPLET_IP }}"
          echo "🔗 Backend API: https://${{ secrets.CUSTOM_DOMAIN }}/api"
          echo "📁 Assets: https://${{ secrets.CUSTOM_DOMAIN }}/assets/"
          echo "🖼️ Images: https://${{ secrets.CUSTOM_DOMAIN }}/images/"
          echo ""
          echo "📋 Next Steps:"
          echo "1. Point your domain's DNS A record to: ${{ secrets.DROPLET_IP }}"
          echo "2. Point your domain's CNAME www record to: ${{ secrets.CUSTOM_DOMAIN }}"
          echo "3. SSL certificate will auto-renew via crontab"